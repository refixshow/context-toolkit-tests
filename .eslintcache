[{"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\index.tsx":"1","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\App.tsx":"2","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\index.tsx":"3","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\actions.ts":"4","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\state.ts":"5","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\lib\\index.tsx":"6","C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\lib\\creator.ts":"7"},{"size":207,"mtime":1610887846391,"results":"8","hashOfConfig":"9"},{"size":717,"mtime":1611084251382,"results":"10","hashOfConfig":"9"},{"size":408,"mtime":1611088862302,"results":"11","hashOfConfig":"9"},{"size":732,"mtime":1610651775009,"results":"12","hashOfConfig":"9"},{"size":897,"mtime":1610482380554,"results":"13","hashOfConfig":"9"},{"size":79,"mtime":1610476259355,"results":"14","hashOfConfig":"9"},{"size":3909,"mtime":1611084920900,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"qs74sp",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\index.tsx",[],["32","33"],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\App.tsx",[],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\index.tsx",[],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\actions.ts",[],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\store\\state.ts",[],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\lib\\index.tsx",[],"C:\\Users\\Maszyna Bojowa\\Desktop\\localhost\\react-context-toolkit\\src\\lib\\creator.ts",["34","35"],"import React, {\n  Dispatch,\n  useMemo,\n  useReducer,\n  useEffect,\n  useContext,\n} from \"react\";\n\nimport {\n  GenericActionsPattern,\n  GenericActionsUnboundPattern,\n  GenericActionsBindedPattern,\n  GenericPayload,\n  GenericAction,\n  GenericState,\n  onLoadFunction,\n  GenericContextStore,\n  Options,\n} from \"./types\";\n\nexport const prepareActionsToBinding = <State>(\n  actions: GenericActionsPattern<State>\n) => {\n  const binded = Object.keys(actions).reduce(\n    (bindedAccumulator, actionName) => {\n      bindedAccumulator[actionName] = (dispatch: Dispatch<GenericAction>) => (\n        payload?: GenericPayload\n      ) => {\n        if (payload) {\n          const action: GenericAction = {\n            type: actionName,\n            payload,\n          };\n          dispatch(action);\n        } else {\n          const action: GenericAction = {\n            type: actionName,\n          };\n          dispatch(action);\n        }\n      };\n      return bindedAccumulator;\n    },\n    {} as GenericActionsUnboundPattern\n  );\n  return binded;\n};\n\nexport const bindActionsToDispatch = (\n  unboundActions: GenericActionsUnboundPattern,\n  dispatch: Dispatch<GenericAction>\n) => {\n  return Object.keys(unboundActions).reduce((bindedActions, actionName) => {\n    bindedActions[actionName] = unboundActions[actionName](dispatch);\n    return bindedActions;\n  }, {} as GenericActionsBindedPattern);\n};\n\nexport const createReducerForActions = <T = GenericState>(\n  actions: GenericActionsPattern<T>\n) => {\n  const reducer: React.Reducer<T, GenericAction> = (state, action) => {\n    if (!actions[action.type]) {\n      throw new Error(`reducer doesnot have action with \"${action.type}\" type`);\n    }\n    return actions[action.type](state, action);\n  };\n  return reducer;\n};\n\nexport const defaultOptions: Options = {\n  logger: true,\n  persist: true,\n};\n\nexport const getInitialState = <T>(state: T, name: string, persist = false) => {\n  if (persist) {\n    try {\n      const saved = localStorage.getItem(name);\n      if (saved) {\n        // console.log('load from localstorage')\n        return JSON.parse(saved);\n      }\n\n      return state;\n    } catch (error) {\n      return state;\n    }\n  }\n  return state;\n};\n\nconst makeContextStore = <State = GenericState>(\n  name: string,\n  initialState: State,\n  allActions: GenericActionsPattern<State>,\n  onLoad: onLoadFunction,\n  options: Options = defaultOptions\n) => {\n  const reducer = createReducerForActions<State>(allActions);\n\n  const context = React.createContext<GenericContextStore>({\n    state: initialState,\n    actions: {},\n  });\n\n  context.displayName = name;\n\n  const makeProvider = (): React.FC => ({ children }) => {\n    const [state, dispatch] = useReducer(\n      reducer,\n      getInitialState(initialState, name, options.persist)\n    );\n    const actionsToBind = useMemo(\n      () => prepareActionsToBinding<State>(allActions),\n      []\n    );\n    const actions = useMemo(\n      () => bindActionsToDispatch(actionsToBind, dispatch),\n      [actionsToBind]\n    );\n\n    useEffect(() => {\n      console.log(`on load ${name}CtxStore`, state, actions);\n      onLoad(actions);\n    }, [actions]);\n\n    useEffect(() => {\n      if (options.logger) {\n        console.log(`on change ${name}CtxStore`, state, actions);\n      }\n      if (options.persist) {\n        // console.log('save to localstorage')\n        localStorage.setItem(name, JSON.stringify(state));\n      }\n    }, [state]);\n\n    const { Provider } = context;\n\n    const Comp = () =>\n      React.createElement(Provider, {\n        value: {\n          state,\n          actions,\n        },\n        children,\n      });\n\n    return Comp();\n  };\n\n  const makeUseCtx = () => () => {\n    const { actions, state } = useContext(context);\n    return {\n      actions,\n      state,\n    };\n  };\n\n  const Provider = makeProvider();\n  const useCtx = makeUseCtx();\n\n  return {\n    useCtx,\n    Provider,\n  };\n};\n\nexport { makeContextStore };\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":126,"column":8,"nodeType":"42","endLine":126,"endColumn":17,"suggestions":"43"},{"ruleId":"40","severity":1,"message":"44","line":136,"column":8,"nodeType":"42","endLine":136,"endColumn":15,"suggestions":"45"},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.","ArrayExpression",["48"],"React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},{"desc":"50","fix":"52"},"Update the dependencies array to be: [actions, state]",{"range":"53","text":"54"},{"range":"55","text":"54"},[3114,3123],"[actions, state]",[3401,3408]]